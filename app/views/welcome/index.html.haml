%h1 Descend

%span Max data points:&nbsp;
%input{id: "var_maxN", type: "text", value: "25"}
%div{id: "theGraph", style: "width:600px;height:300px" }
%p{id: "btn_clear"}= link_to("Clear", "#")




:javascript

  //TODO: get rid of globals
  var thePlot, xyData = [], fitData = {}

  // generate callback for "the data has changed"
  function updateData() {
    xyData = pruneData(xyData);
    fitData.llmse = computeFit(xyData);
    plotIt(xyData, {llmse: fitData.llmse});
  }

  function clearData() {
    xyData = [];
    updateData();
  }

  // general function to plot data and any fit lines
  function plotIt(xyData, fits) {
    var coefs
    if (fits === undefined) fits = {};

    // define first plot data: the data points themselves
    var series = [{
      data: xyData,
      points: {show: true},
      color: "blue"
    }];

    // plot options
    var options = {
      grid: {clickable: true},
      xaxis: {min: 0, max: 1},
      yaxis: {min: 0, max: 1}
    };

    // add fit line if specified
    if (fits.llmse) {
      fitData = getFitPlotData(fits.llmse);
      series.push({
        data: fitData,
        lines: {show: true},
        color: "red"
      });
    }

    // add descent fit line if specified
    if (fits.descent) {
      fitData = getFitPlotData(fits.descent);
      series.push({
        data: fitData,
        lines: {show: true},
        color: "yellow"
      });
    }

    thePlot = $.plot("#theGraph", series, options);
    return thePlot;
  }

  // limit to manN data points
  function pruneData(xyData) {
    while (xyData.length > Number($("#var_maxN").val())) {xyData.shift()};
    return xyData
  }

  // return x,y data for llmse fit
  function getFitPlotData(coefs) {
    var xMin = thePlot.getAxes().xaxis.min;
    var xMax = thePlot.getAxes().xaxis.max;
    var xStep = (xMax - xMin) / 50;
    var xVals = math.range(xMin, xMax + xStep, xStep)._data;
    var fMatrix = modeling.nlFeatures(xVals);
    var pMatrix = math.multiply(fMatrix, coefs);
    var yVals = pMatrix.transpose()._data[0];
    var fitData = math.matrix([xVals, yVals]).transpose()._data;
    return fitData;
  }

  // compute fit coeffs for llmse given data
  function computeFit(xyData) {
    if (xyData.length == 0) return null;
    xPoints = xyData.map(function(xy){return xy[0]});
    yPoints = xyData.map(function(xy){return xy[1]});
    xData = modeling.nlFeatures(xPoints);
    yData = math.matrix([yPoints]).transpose();
    coefs = modeling.llmse(xData, yData);
    return coefs;    
  }

  $(document).ready( function() {
    $("#btn_clear").click(clearData);
    $("#var_maxN").change(updateData);

    thePlot = plotIt([]);

    $("#theGraph").bind("plotclick", function(event, pos, item){
      xyData.push([pos.x, pos.y]);
      updateData();
    });

  } );
